
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 29 14:34:12 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 29 14:34:12 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\002\005\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\007\000\002\004\007\000\002\004\006\000" +
    "\002\004\006\000\002\004\004\000\002\004\005\000\002" +
    "\004\007\000\002\004\007\000\002\004\006\000\002\004" +
    "\006\000\002\004\010\000\002\004\010\000\002\004\011" +
    "\000\002\004\011\000\002\006\011\000\002\016\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\006\000\002\016\007\000\002\007\015\000\002\010" +
    "\011\000\002\011\013\000\002\012\011\000\002\013\010" +
    "\000\002\017\012\000\002\017\011\000\002\005\005\000" +
    "\002\005\004\000\002\005\004\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\010\010\007\023\004\051\005\001\002\000" +
    "\004\055\227\001\002\000\004\043\222\001\002\000\004" +
    "\002\221\001\002\000\004\051\010\001\002\000\004\043" +
    "\011\001\002\000\004\044\012\001\002\000\004\045\013" +
    "\001\002\000\024\007\023\010\027\011\021\012\016\014" +
    "\025\015\017\016\031\043\022\055\032\001\002\000\026" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\043\ufff6\046\ufff6\055\ufff6\001\002\000\026\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\043" +
    "\ufff2\046\ufff2\055\ufff2\001\002\000\004\043\207\001\002" +
    "\000\004\043\201\001\002\000\026\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\014\ufffc\015\ufffc\016\ufffc\043\ufffc\046\ufffc" +
    "\055\ufffc\001\002\000\004\055\162\001\002\000\012\007" +
    "\023\010\027\011\021\055\032\001\002\000\006\041\140" +
    "\055\141\001\002\000\026\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\043\ufff8\046\ufff8\055\ufff8" +
    "\001\002\000\004\045\130\001\002\000\026\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\043\ufffa" +
    "\046\ufffa\055\ufffa\001\002\000\006\041\113\055\114\001" +
    "\002\000\026\007\023\010\027\011\021\012\016\014\025" +
    "\015\017\016\031\043\022\046\112\055\032\001\002\000" +
    "\004\043\036\001\002\000\004\056\035\001\002\000\026" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\043\ufff0\046\ufff0\055\ufff0\001\002\000\026\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\043" +
    "\ufff4\046\ufff4\055\ufff4\001\002\000\030\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\014\uffea\015\uffea\016\uffea\043\uffea\044" +
    "\uffea\046\uffea\055\uffea\001\002\000\006\007\040\055\041" +
    "\001\002\000\004\044\077\001\002\000\004\055\070\001" +
    "\002\000\004\030\042\001\002\000\004\056\043\001\002" +
    "\000\004\052\044\001\002\000\006\042\046\055\047\001" +
    "\002\000\004\052\060\001\002\000\006\044\uffdf\052\uffdf" +
    "\001\002\000\004\037\050\001\002\000\012\005\052\042" +
    "\053\055\054\056\051\001\002\000\006\044\uffdd\052\uffdd" +
    "\001\002\000\006\005\055\055\056\001\002\000\006\044" +
    "\uffde\052\uffde\001\002\000\006\044\uffdc\052\uffdc\001\002" +
    "\000\006\044\uffdb\052\uffdb\001\002\000\004\005\057\001" +
    "\002\000\006\044\uffda\052\uffda\001\002\000\006\041\063" +
    "\055\062\001\002\000\004\044\uffd3\001\002\000\006\040" +
    "\065\041\066\001\002\000\004\055\064\001\002\000\004" +
    "\044\uffd0\001\002\000\004\056\067\001\002\000\004\044" +
    "\uffd1\001\002\000\004\044\uffd2\001\002\000\004\030\071" +
    "\001\002\000\004\056\072\001\002\000\004\052\073\001" +
    "\002\000\006\042\046\055\047\001\002\000\004\052\075" +
    "\001\002\000\006\041\063\055\062\001\002\000\004\044" +
    "\uffd4\001\002\000\004\045\100\001\002\000\024\007\023" +
    "\010\027\011\021\012\016\014\025\015\017\016\031\043" +
    "\022\055\032\001\002\000\026\007\023\010\027\011\021" +
    "\012\016\014\025\015\017\016\031\043\022\046\107\055" +
    "\032\001\002\000\026\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\043\ufff7\046\ufff7\055\ufff7\001" +
    "\002\000\026\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\043\ufff3\046\ufff3\055\ufff3\001\002\000" +
    "\026\007\ufffd\010\ufffd\011\ufffd\012\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\043\ufffd\046\ufffd\055\ufffd\001\002\000\026\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\043\ufff9\046\ufff9\055\ufff9\001\002\000\026\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\016\ufffb\043\ufffb" +
    "\046\ufffb\055\ufffb\001\002\000\026\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\014\uffd6\015\uffd6\016\uffd6\043\uffd6\046\uffd6" +
    "\055\uffd6\001\002\000\026\007\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\043\ufff1\046\ufff1\055\ufff1" +
    "\001\002\000\026\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\043\ufff5\046\ufff5\055\ufff5\001\002" +
    "\000\004\002\000\001\002\000\004\055\126\001\002\000" +
    "\012\030\120\040\115\041\117\052\116\001\002\000\004" +
    "\056\124\001\002\000\030\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\014\uffef\015\uffef\016\uffef\043\uffef\044\uffef\046\uffef" +
    "\055\uffef\001\002\000\004\052\123\001\002\000\004\056" +
    "\121\001\002\000\004\052\122\001\002\000\030\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\014\uffed\015\uffed\016\uffed\043" +
    "\uffed\044\uffed\046\uffed\055\uffed\001\002\000\030\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\014\uffec\015\uffec\016\uffec\043" +
    "\uffec\044\uffec\046\uffec\055\uffec\001\002\000\004\052\125" +
    "\001\002\000\030\007\uffee\010\uffee\011\uffee\012\uffee\014" +
    "\uffee\015\uffee\016\uffee\043\uffee\044\uffee\046\uffee\055\uffee" +
    "\001\002\000\004\052\127\001\002\000\030\007\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\014\uffeb\015\uffeb\016\uffeb\043\uffeb" +
    "\044\uffeb\046\uffeb\055\uffeb\001\002\000\024\007\023\010" +
    "\027\011\021\012\016\014\025\015\017\016\031\043\022" +
    "\055\032\001\002\000\026\007\023\010\027\011\021\012" +
    "\016\014\025\015\017\016\031\043\022\046\132\055\032" +
    "\001\002\000\004\015\133\001\002\000\004\043\134\001" +
    "\002\000\006\042\046\055\047\001\002\000\004\044\136" +
    "\001\002\000\004\052\137\001\002\000\026\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\014\uffd7\015\uffd7\016\uffd7\043\uffd7" +
    "\046\uffd7\055\uffd7\001\002\000\004\055\153\001\002\000" +
    "\012\030\145\040\142\041\144\052\143\001\002\000\004" +
    "\056\151\001\002\000\030\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\043\uffe9\044\uffe9\046\uffe9" +
    "\055\uffe9\001\002\000\004\052\150\001\002\000\004\056" +
    "\146\001\002\000\004\052\147\001\002\000\030\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\043" +
    "\uffe7\044\uffe7\046\uffe7\055\uffe7\001\002\000\030\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6\043" +
    "\uffe6\044\uffe6\046\uffe6\055\uffe6\001\002\000\004\052\152" +
    "\001\002\000\030\007\uffe8\010\uffe8\011\uffe8\012\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\043\uffe8\044\uffe8\046\uffe8\055\uffe8" +
    "\001\002\000\004\052\154\001\002\000\030\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\043\uffe5" +
    "\044\uffe5\046\uffe5\055\uffe5\001\002\000\004\044\156\001" +
    "\002\000\004\045\157\001\002\000\024\007\023\010\027" +
    "\011\021\012\016\014\025\015\017\016\031\043\022\055" +
    "\032\001\002\000\026\007\023\010\027\011\021\012\016" +
    "\014\025\015\017\016\031\043\022\046\161\055\032\001" +
    "\002\000\026\007\uffd5\010\uffd5\011\uffd5\012\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\043\uffd5\046\uffd5\055\uffd5\001\002\000" +
    "\006\030\164\040\163\001\002\000\004\005\173\001\002" +
    "\000\004\005\165\001\002\000\006\005\166\055\167\001" +
    "\002\000\004\052\172\001\002\000\004\005\170\001\002" +
    "\000\004\052\171\001\002\000\030\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\043\uffe1\044\uffe1" +
    "\046\uffe1\055\uffe1\001\002\000\030\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\043\uffe3\044\uffe3" +
    "\046\uffe3\055\uffe3\001\002\000\006\005\174\055\175\001" +
    "\002\000\004\052\200\001\002\000\004\005\176\001\002" +
    "\000\004\052\177\001\002\000\030\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\043\uffe2\044\uffe2" +
    "\046\uffe2\055\uffe2\001\002\000\030\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\043\uffe4\044\uffe4" +
    "\046\uffe4\055\uffe4\001\002\000\006\042\046\055\047\001" +
    "\002\000\004\044\203\001\002\000\004\045\204\001\002" +
    "\000\024\007\023\010\027\011\021\012\016\014\025\015" +
    "\017\016\031\043\022\055\032\001\002\000\026\007\023" +
    "\010\027\011\021\012\016\014\025\015\017\016\031\043" +
    "\022\046\206\055\032\001\002\000\026\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\014\uffd8\015\uffd8\016\uffd8\043\uffd8\046" +
    "\uffd8\055\uffd8\001\002\000\006\042\046\055\047\001\002" +
    "\000\004\044\211\001\002\000\004\045\212\001\002\000" +
    "\024\007\023\010\027\011\021\012\016\014\025\015\017" +
    "\016\031\043\022\055\032\001\002\000\026\007\023\010" +
    "\027\011\021\012\016\014\025\015\017\016\031\043\022" +
    "\046\214\055\032\001\002\000\030\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\013\215\014\uffe0\015\uffe0\016\uffe0\043\uffe0" +
    "\046\uffe0\055\uffe0\001\002\000\004\045\216\001\002\000" +
    "\024\007\023\010\027\011\021\012\016\014\025\015\017" +
    "\016\031\043\022\055\032\001\002\000\026\007\023\010" +
    "\027\011\021\012\016\014\025\015\017\016\031\043\022" +
    "\046\220\055\032\001\002\000\026\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\043\uffd9\046\uffd9" +
    "\055\uffd9\001\002\000\004\002\001\001\002\000\004\044" +
    "\223\001\002\000\004\045\224\001\002\000\024\007\023" +
    "\010\027\011\021\012\016\014\025\015\017\016\031\043" +
    "\022\055\032\001\002\000\026\007\023\010\027\011\021" +
    "\012\016\014\025\015\017\016\031\043\022\046\226\055" +
    "\032\001\002\000\004\002\uffff\001\002\000\004\056\230" +
    "\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\027\004\017\006\025\007\023\010\013\011\033\012\014" +
    "\013\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\103\006\105\007\104\010\101\011" +
    "\110\012\102\013\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\073\001\001\000" +
    "\002\001\001\000\004\005\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\100\004\017\006\025\007" +
    "\023\010\013\011\033\012\014\013\032\001\001\000\020" +
    "\004\103\006\105\007\104\010\101\011\110\012\102\013" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\130\004\017\006\025\007\023\010\013\011" +
    "\033\012\014\013\032\001\001\000\020\004\103\006\105" +
    "\007\104\010\101\011\110\012\102\013\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\157\004\017" +
    "\006\025\007\023\010\013\011\033\012\014\013\032\001" +
    "\001\000\020\004\103\006\105\007\104\010\101\011\110" +
    "\012\102\013\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\204\004\017\006" +
    "\025\007\023\010\013\011\033\012\014\013\032\001\001" +
    "\000\020\004\103\006\105\007\104\010\101\011\110\012" +
    "\102\013\107\001\001\000\002\001\001\000\004\016\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\212\004\017\006\025\007\023\010\013\011\033\012\014" +
    "\013\032\001\001\000\020\004\103\006\105\007\104\010" +
    "\101\011\110\012\102\013\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\216\004\017\006\025\007" +
    "\023\010\013\011\033\012\014\013\032\001\001\000\020" +
    "\004\103\006\105\007\104\010\101\011\110\012\102\013" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\224\004\017\006" +
    "\025\007\023\010\013\011\033\012\014\013\032\001\001" +
    "\000\020\004\103\006\105\007\104\010\101\011\110\012" +
    "\102\013\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SET ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SWITCH ::= Parentesis_a DECLARACION Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Set Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

